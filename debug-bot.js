const { Telegraf } = require('telegraf');
const https = require('https');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = '8326608021:AAHT1G8YOVAq_RfWiq2m6NGnbRyAx9fhKDU';

console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
const checkToken = () => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.telegram.org',
      path: `/bot${BOT_TOKEN}/getMe`,
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response);
        } catch (e) {
          reject(e);
        }
      });
    });
    
    req.on('error', reject);
    req.end();
  });
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkToken()
  .then((response) => {
    if (response.ok) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π!');
      console.log('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
      console.log('  - Username:', response.result.username);
      console.log('  - –ò–º—è:', response.result.first_name);
      console.log('  - ID:', response.result.id);
      console.log('  - Can join groups:', response.result.can_join_groups);
      console.log('  - Can read messages:', response.result.can_read_all_group_messages);
      console.log('  - Supports inline:', response.result.supports_inline_queries);
      
      console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...\n');
      
      // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      const bot = new Telegraf(BOT_TOKEN);
      
      bot.start((ctx) => {
        console.log('üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: ctx.from.id,
          username: ctx.from.username,
          first_name: ctx.from.first_name
        });
        
        return ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ');
      });
      
      bot.on('text', (ctx) => {
        console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);
        return ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${ctx.message.text}`);
      });
      
      bot.catch((err, ctx) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å polling
      bot.launch({
        dropPendingUpdates: true
      }).then(() => {
        console.log('‚úÖ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!');
        console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @' + response.result.username);
        console.log('üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        console.log('\nüìä –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π:');
        console.log('=====================================');
      }).catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
      });
      
      // Graceful stop
      process.once('SIGINT', () => bot.stop('SIGINT'));
      process.once('SIGTERM', () => bot.stop('SIGTERM'));
      
    } else {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π!');
      console.error('–û—Ç–≤–µ—Ç –æ—Ç Telegram:', response);
    }
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
  });