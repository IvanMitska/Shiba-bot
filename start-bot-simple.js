require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN || '8326608021:AAHT1G8YOVAq_RfWiq2m6NGnbRyAx9fhKDU';

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ SHIBA-CARS (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

const bot = new Telegraf(BOT_TOKEN);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
const partners = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    const userId = ctx.from.id;
    const username = ctx.from.username || '';
    const firstName = ctx.from.first_name || '–ü–∞—Ä—Ç–Ω–µ—Ä';
    
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId} (@${username})`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    let partner = partners.get(userId);
    if (!partner) {
      const partnerCode = Math.random().toString(36).substring(2, 10).toUpperCase();
      partner = {
        id: userId,
        username,
        firstName,
        code: partnerCode,
        totalClicks: 0,
        createdAt: new Date()
      };
      partners.set(userId, partner);
    }
    
    const partnerLink = `http://localhost:3000/r/${partner.code}`;
    
    const message = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ SHIBA CARS, ${firstName}!

üöó –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞—Ä–µ–Ω–¥—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

–í–∞—à–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:
üîó \`${partnerLink}\`

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚îî –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${partner.totalClicks}

üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üìä –û—Ç–∫—Ä—ã—Ç—å –ª–µ–Ω–¥–∏–Ω–≥', partnerLink)],
      [
        Markup.button.callback('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'copy_link'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh')
      ]
    ]);
    
    await ctx.replyWithMarkdown(message, keyboard);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
  try {
    const action = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const partner = partners.get(userId);
    
    if (!partner) {
      await ctx.answerCbQuery('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }
    
    switch (action) {
      case 'copy_link':
        const link = `http://localhost:3000/r/${partner.code}`;
        await ctx.answerCbQuery('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ', { show_alert: true });
        await ctx.reply(`\`${link}\``, { parse_mode: 'Markdown' });
        break;
        
      case 'refresh':
        await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ');
        await ctx.reply(`üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${partner.totalClicks}`);
        break;
        
      default:
        await ctx.answerCbQuery();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on('text', (ctx) => {
  ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
});

// –ó–∞–ø—É—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
const startBot = async () => {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    const timeout = setTimeout(() => {
      console.error('‚è± –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('1. Telegram API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π —Å–µ—Ç–∏');
      console.error('2. –ù—É–∂–µ–Ω VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏');
      console.error('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ngrok + webhook');
      console.error('\nüì± –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ª–µ–Ω–¥–∏–Ω–≥: http://localhost:3000');
      process.exit(1);
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    await bot.launch({
      dropPendingUpdates: true,
      allowedUpdates: ['message', 'callback_query']
    });
    
    clearTimeout(timeout);
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram: @SHIBA_CARS_PARTNERS_BOT');
    console.log('üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    console.log('üåê –õ–µ–Ω–¥–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:3000');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    console.error('\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:');
    console.error('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN');
    console.error('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook —á–µ—Ä–µ–∑ ngrok');
    console.error('3. –û—Ç–∫—Ä–æ–π—Ç–µ –ª–µ–Ω–¥–∏–Ω–≥: http://localhost:3000');
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º
startBot();

// Graceful stop
process.once('SIGINT', () => {
  console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});